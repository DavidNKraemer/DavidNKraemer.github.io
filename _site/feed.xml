<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-03-11T10:52:53-04:00</updated><id>http://localhost:4000/</id><title type="html">David Kraemer</title><subtitle>applied math phd student</subtitle><author><name>David Kraemer</name></author><entry><title type="html">A characterization of numerical lower semi-continuity</title><link href="http://localhost:4000/ln/characterizing-numerical-lsc-functions.html" rel="alternate" type="text/html" title="A characterization of numerical lower semi-continuity" /><published>2018-06-28T00:00:00-04:00</published><updated>2018-06-28T00:00:00-04:00</updated><id>http://localhost:4000/ln/characterizing-numerical-lsc-functions</id><content type="html" xml:base="http://localhost:4000/ln/characterizing-numerical-lsc-functions.html">&lt;p&gt;One can define numerical lower semi-continuity using a sequential criterion: for
&lt;script type=&quot;math/tex&quot;&gt;\newcommand{\RR}{\mathbb{R}}
\renewcommand{\bar}{\overline}
f : X \to \bar{\RR},&lt;/script&gt;
we say that &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is &lt;em&gt;lower semi-continuous&lt;/em&gt; at &lt;script type=&quot;math/tex&quot;&gt;x \in X&lt;/script&gt; if for any
sequence &lt;script type=&quot;math/tex&quot;&gt;x_n \to x&lt;/script&gt; we have&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x) \leq \liminf_{n \to \infty} f(x_n).&lt;/script&gt;

&lt;p&gt;The idea is that &lt;script type=&quot;math/tex&quot;&gt;f(x_n)&lt;/script&gt; is eventually bounded below by &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt;; that
is, for every &lt;script type=&quot;math/tex&quot;&gt;\varepsilon &gt; 0&lt;/script&gt; there exists an &lt;script type=&quot;math/tex&quot;&gt;N \in \mathbb{N}&lt;/script&gt; such
that whenever &lt;script type=&quot;math/tex&quot;&gt;n \geq N&lt;/script&gt; we have&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
f(x_n) - f(x) &lt; \varepsilon. %]]&gt;&lt;/script&gt;

&lt;p&gt;Unsurprisingly, if &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is lower semi-continuous it follows that for any
convergent sequence &lt;script type=&quot;math/tex&quot;&gt;x_n \to x&lt;/script&gt; we have&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x) \leq \limsup_{n \to \infty} f(x_n),&lt;/script&gt;

&lt;p&gt;since&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
f(x) &amp; \leq \liminf_{n \to \infty} f(x_n) \\
&amp;\leq \limsup_{n \to \infty} f(x_n).
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;What’s more surprising is that these conditions are equivalent!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proposition&lt;/strong&gt;. &lt;em&gt;If for any convergent sequence &lt;script type=&quot;math/tex&quot;&gt;x_n \to x&lt;/script&gt; we have&lt;/em&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x) \leq \limsup_{n \to \infty} f(x_n)&lt;/script&gt;

&lt;p&gt;&lt;em&gt;then &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is lower semi-continuous at &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I find this surprising because the property above relates to the limiting &lt;em&gt;upper
bounds&lt;/em&gt; of a sequence. Why should that have any influence on the limiting
behavior of the &lt;em&gt;lower bounds&lt;/em&gt;? There is sort of a mathematical feint at work
here, because the upper limit is not where the strength of the hypothesis lies.
Instead, it’s hidden in the fact that this upper limit bound holds &lt;em&gt;for every&lt;/em&gt;
convergent sequence. Let’s find out why.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Proof&lt;/em&gt;. By the contrapositive. Suppose &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is not lower semi-continuous, so
that there exists a sequence &lt;script type=&quot;math/tex&quot;&gt;x_n \to x&lt;/script&gt; with&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\liminf_{n \to \infty} f(x_n) = s &lt; f(x). %]]&gt;&lt;/script&gt;

&lt;p&gt;Now, &lt;script type=&quot;math/tex&quot;&gt;s&lt;/script&gt; is a limit point of the sequence &lt;script type=&quot;math/tex&quot;&gt;( f(x_n) )&lt;/script&gt;, which means we
can fix a subsequence &lt;script type=&quot;math/tex&quot;&gt;x_{n_k}&lt;/script&gt; for which &lt;script type=&quot;math/tex&quot;&gt;\lim _ {k \to \infty}
f(x_{n_k}) = s&lt;/script&gt;. But since &lt;script type=&quot;math/tex&quot;&gt;( x _ {n_k} )&lt;/script&gt; is a subsequence of &lt;script type=&quot;math/tex&quot;&gt;(x _ n)&lt;/script&gt;, it remains true that &lt;script type=&quot;math/tex&quot;&gt;x _ {n_k} \to x&lt;/script&gt;. This sequence converges to &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; but also has the property that&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\limsup _ {k \to \infty} f(x _ {n_k}) &amp;= \lim _ {k \to \infty} f(n_k) \\
&amp;= s \\
&amp;&lt; f(x) 
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;which implies that the hypothesis of the proposition is false. By taking the
contrapositive, we obtain the desired result. &lt;script type=&quot;math/tex&quot;&gt;\square&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I suspect that this is actually a highly practical result, because it provides
the flexibility of looking at either the upper or lower limits of arbitrary
sequences. That can (and soon will) come in handy for some of my work.&lt;/p&gt;</content><author><name>David Kraemer</name></author><category term="research" /><category term="games" /><category term="topology" /><category term="optimization" /><summary type="html">One can define numerical lower semi-continuity using a sequential criterion: for we say that is lower semi-continuous at if for any sequence we have</summary></entry><entry><title type="html">Examples of numerical semi-continuous functions</title><link href="http://localhost:4000/ln/numerical-semicontinuous-functions.html" rel="alternate" type="text/html" title="Examples of numerical semi-continuous functions" /><published>2018-06-27T00:00:00-04:00</published><updated>2018-06-27T00:00:00-04:00</updated><id>http://localhost:4000/ln/numerical-semicontinuous-functions</id><content type="html" xml:base="http://localhost:4000/ln/numerical-semicontinuous-functions.html">&lt;p&gt;Though we have been previously discussing the abstract definition of lower and
upper semi-continuity, there are also tailored definitions for &lt;em&gt;numerical
functions&lt;/em&gt;, single-valued multifunctions which map into the extended real
numbers. For the moment, let’s only consider these numerical functions &lt;script type=&quot;math/tex&quot;&gt;\newcommand{\set}[1]{\{#1\}} \renewcommand{\bar}{\overline}
\newcommand{\RR}{\mathbb{R}}
f : X
\to \bar{\RR}&lt;/script&gt;. The relevant sets for lower and upper semi-continuity become&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\mathcal{L}_f(\lambda ; H ) &amp;= \set{ x \in X : f(x) \leq \lambda} \\
\mathcal{U}_f(\lambda ; H ) &amp;= \set{ x \in X : f(x) \geq \lambda}.
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;These are just the normal level sets of &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt;. Since we will usually consider
the cases when &lt;script type=&quot;math/tex&quot;&gt;H = X&lt;/script&gt;, let’s agree to the shorthand notations of &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}_f(\lambda) = \mathcal{L}_f(\lambda ; X )&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\mathcal{U}_f(\lambda) = \mathcal{U}_f(\lambda ; X )&lt;/script&gt;.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;p&gt;The first basic (yet important) example of a function &lt;script type=&quot;math/tex&quot;&gt;f : X \to \RR&lt;/script&gt; which
is semi-continuous but &lt;em&gt;not&lt;/em&gt; continuous is a step function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/ipe-graphics/2018-06-14-real-usc-not-lsc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here &lt;script type=&quot;math/tex&quot;&gt;f : \RR \to \RR&lt;/script&gt; is defined by&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
f(x) = 
\begin{cases}
1 &amp; x &lt; 1 \\
2 &amp; 1 \leq x &lt; 2 \\
3 &amp; 3 \geq x
\end{cases} %]]&gt;&lt;/script&gt;

&lt;p&gt;I drew an arbitrary &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt; at around &lt;script type=&quot;math/tex&quot;&gt;5/2&lt;/script&gt; to illustrate how
semi-continuity works. In this case, &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}_f(\lambda) = (-\infty, 2)&lt;/script&gt;
is an open set, and in particular it is not closed. So we can see that &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt;
is not &lt;script type=&quot;math/tex&quot;&gt;\RR&lt;/script&gt;-lower semi-continuous. However, &lt;script type=&quot;math/tex&quot;&gt;\mathcal{U}_f(\lambda) = [2,
\infty)&lt;/script&gt; which is closed. It seems to suggest that &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; may indeed by
&lt;script type=&quot;math/tex&quot;&gt;\RR&lt;/script&gt;-upper semi-continuous. Indeed, you can imagine sweeping the &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt;
line up and down the plot, and no matter where it lands, the upper level set
will be a closed set.&lt;/p&gt;

&lt;p&gt;Why is this the case? We have to pay special attention to two facts. First, note
that &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is monotonically increasing. Second, notice how the jump
discontinuities at &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; are oriented. In particular, the left-side
limit of &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; does not match its actual value at these spots, whereas the
right-side limit does. This means that if you swept &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt; down from
&lt;script type=&quot;math/tex&quot;&gt;+\infty&lt;/script&gt; and reached past, say, &lt;script type=&quot;math/tex&quot;&gt;\lambda = 3&lt;/script&gt;, the upper level sets
have already gobbled up &lt;script type=&quot;math/tex&quot;&gt;(2,f(2))&lt;/script&gt;, which is a limit point of the graph. As a
consequence, the lower level sets will periodically miss limit points, violating
closure.&lt;/p&gt;

&lt;p&gt;Monotonicity is important for step functions to retain semi-continuity, but the
direction matters for the specifics. In our case, &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; monotonically
increases, and together with the arrangement of jump discontinuities gives us
upper semi-continuity. If we considered &lt;script type=&quot;math/tex&quot;&gt;-f&lt;/script&gt;, which now monotonically
decreases with the same jump discontinuities, it follows that &lt;script type=&quot;math/tex&quot;&gt;-f&lt;/script&gt; is lower
semi-continuous. Or, if we switched the arrangement of jump discontinuities for
&lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt;, then it would become lower semi-continuous. (Doing both exchanges
returns us back to upper semi-continuity.)&lt;/p&gt;

&lt;p&gt;For probability theory, distribution functions are always oriented like &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt;
in that they are monotonically increasing and upper semi-continuous.&lt;/p&gt;

&lt;h3 id=&quot;thomaes-function&quot;&gt;Thomae’s function&lt;/h3&gt;

&lt;p&gt;Taking off the training wheels, let’s consider Thomae’s function, which is
notorious in introduction to analysis courses.  This is defined &lt;script type=&quot;math/tex&quot;&gt;f : \RR \to
[0,1]&lt;/script&gt; in the following way. If &lt;script type=&quot;math/tex&quot;&gt;x \in [0,1]&lt;/script&gt; is irrational, then set &lt;script type=&quot;math/tex&quot;&gt;f(x) = 0&lt;/script&gt;. Otherwise, let &lt;script type=&quot;math/tex&quot;&gt;x = p/q&lt;/script&gt; be the canonical rational form (that
is, such that &lt;script type=&quot;math/tex&quot;&gt;\gcd(p,q) = 1&lt;/script&gt;, since there is only one such pair &lt;script type=&quot;math/tex&quot;&gt;(p,q)&lt;/script&gt;),
and set &lt;script type=&quot;math/tex&quot;&gt;f(x) = 1/q&lt;/script&gt;. You get something which looks like the following
plot&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/notebooks/2018-06-14-thomaes-function.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a function which is continuous at any irrational number but
discontinuous at every rational number. I won’t prove this fact here. On
&lt;script type=&quot;math/tex&quot;&gt;\RR&lt;/script&gt;, the entire function is clearly not continuous, but we might ask
whether it is semi-continuous.&lt;/p&gt;

&lt;p&gt;We’ll start with upper semi-continuity. So, let &lt;script type=&quot;math/tex&quot;&gt;\lambda \in [0,1]&lt;/script&gt; be
arbitrary. Notice that by definition &lt;script type=&quot;math/tex&quot;&gt;\mathcal{U}_f(0) = \RR&lt;/script&gt;, so consider
the case when &lt;script type=&quot;math/tex&quot;&gt;\lambda &gt; 0&lt;/script&gt;.  To see that &lt;script type=&quot;math/tex&quot;&gt;\mathcal{U}_f(\lambda)&lt;/script&gt; is closed, we will
show that it has no limit points.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; Let &lt;script type=&quot;math/tex&quot;&gt;Q = \max \set{q \in \mathbb{N} : 1/q &gt;
\lambda }&lt;/script&gt;,&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; and let&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Delta = \inf \set{ |x-y| : x, y \in \mathcal{U}_f(\lambda)}.&lt;/script&gt;

&lt;!-- _fix --&gt;

&lt;p&gt;Now, &lt;script type=&quot;math/tex&quot;&gt;\mathcal{U}_f(\lambda)&lt;/script&gt; &lt;!-- _fix --&gt; if and only if &lt;script type=&quot;math/tex&quot;&gt;\Delta = 0&lt;/script&gt;.
Now at first glance, there’s no reason to suspect &lt;script type=&quot;math/tex&quot;&gt;\Delta&lt;/script&gt; to be positive. But
examine the plot again, and it starts to become clear that there are only
finitely many different “widths” in the upper level set. Indeed, we actually
have&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Delta = \inf \set{ |1/q - 1/q'| : q,q' \in \set{1,\dots,Q},  q \ne q' }.&lt;/script&gt;

&lt;p&gt;But since the set on the right hand side has at most &lt;script type=&quot;math/tex&quot;&gt;Q^2&lt;/script&gt; members, we can
exchange the infimum for a minimum and conclude that &lt;script type=&quot;math/tex&quot;&gt;\Delta &gt; 0&lt;/script&gt;. So
&lt;script type=&quot;math/tex&quot;&gt;\mathcal{U}_f(\lambda)&lt;/script&gt; &lt;!-- _fix --&gt; has no limit points, and is vacuously
closed. Hence, &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is &lt;script type=&quot;math/tex&quot;&gt;\RR&lt;/script&gt;-upper semi-continuous.&lt;/p&gt;

&lt;p&gt;Of course, this also means that &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}_f(\lambda)&lt;/script&gt; &lt;!-- _fix --&gt; is
&lt;em&gt;not&lt;/em&gt; closed for any &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\lambda &lt; 1 %]]&gt;&lt;/script&gt;, which implies that &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is
not &lt;script type=&quot;math/tex&quot;&gt;\RR&lt;/script&gt;-lower semi-continuous.&lt;/p&gt;

&lt;h4 id=&quot;endnotes&quot;&gt;Endnotes&lt;/h4&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;I used Matplotlib to make this plot. If you want to see how, &lt;a href=&quot;/files/notebooks/2018-06-14-thomaes-function.html&quot;&gt;here&lt;/a&gt; is the notebook, which you can download &lt;a href=&quot;/files/notebooks/2018-06-14-thomaes-function.ipynb&quot;&gt;here&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;The natural numbers &lt;script type=&quot;math/tex&quot;&gt;\mathbb{N}&lt;/script&gt; are an example of a set without limit points, which is vacuously closed. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
Q &lt; \infty %]]&gt;&lt;/script&gt; because once &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
1 / q &lt; \lambda %]]&gt;&lt;/script&gt;, every &lt;script type=&quot;math/tex&quot;&gt;p &gt; q&lt;/script&gt; satisfies &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
1/p &lt; \lambda %]]&gt;&lt;/script&gt;. Also, &lt;script type=&quot;math/tex&quot;&gt;q&lt;/script&gt; exists by the Archimedean property of &lt;script type=&quot;math/tex&quot;&gt;\mathbb{N}&lt;/script&gt;. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>David Kraemer</name></author><category term="research" /><category term="games" /><category term="topology" /><category term="optimization" /><summary type="html">Though we have been previously discussing the abstract definition of lower and upper semi-continuity, there are also tailored definitions for numerical functions, single-valued multifunctions which map into the extended real numbers. For the moment, let’s only consider these numerical functions . The relevant sets for lower and upper semi-continuity become</summary></entry><entry><title type="html">Understanding semi-continuity of multifunctions</title><link href="http://localhost:4000/ln/semi-continuity.html" rel="alternate" type="text/html" title="Understanding semi-continuity of multifunctions" /><published>2018-06-26T00:00:00-04:00</published><updated>2018-06-26T00:00:00-04:00</updated><id>http://localhost:4000/ln/semi-continuity</id><content type="html" xml:base="http://localhost:4000/ln/semi-continuity.html">&lt;p&gt;Let &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; be topological spaces. One of the basic objects of study
in topology are the continuous functions &lt;script type=&quot;math/tex&quot;&gt;f : X \to Y&lt;/script&gt;. Continuity in its
pure form is a topological characterization: if &lt;script type=&quot;math/tex&quot;&gt;V \subseteq Y&lt;/script&gt; is an open
set, then continuity is equivalent to the openness of &lt;script type=&quot;math/tex&quot;&gt;f^{-1}[V] \subseteq X&lt;/script&gt;. The same concept is useful for multifunctions in addition to regular
functions, though we need to clarify &lt;script type=&quot;math/tex&quot;&gt;f^{-1} [V]&lt;/script&gt; in this context. First,
however, we need to disaggregate continuity into two weaker properties.&lt;/p&gt;

&lt;h2 id=&quot;lower-semi-continuity&quot;&gt;Lower semi-continuity&lt;/h2&gt;

&lt;p&gt;Let &lt;script type=&quot;math/tex&quot;&gt;\Gamma : X \twoheadrightarrow Y&lt;/script&gt; be a multifunction. We say that &lt;script type=&quot;math/tex&quot;&gt;\Gamma&lt;/script&gt; is &lt;em&gt;lower semi-continuous&lt;/em&gt; at &lt;script type=&quot;math/tex&quot;&gt;x_0 \in X&lt;/script&gt; if,  for any open &lt;script type=&quot;math/tex&quot;&gt;V
\subseteq Y&lt;/script&gt; with&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Gamma x_0 \cap V  \ne \emptyset ,&lt;/script&gt;

&lt;p&gt;there exists an open neighborhood &lt;script type=&quot;math/tex&quot;&gt;U(x_0) \subseteq X&lt;/script&gt; such that if &lt;script type=&quot;math/tex&quot;&gt;x \in
U(x_0)&lt;/script&gt;, then&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Gamma x \cap V \ne \emptyset.&lt;/script&gt;

&lt;p&gt;We will say that &lt;script type=&quot;math/tex&quot;&gt;\Gamma&lt;/script&gt; is lower semi-continuous on &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; if it is lower
semi-continuous at all &lt;script type=&quot;math/tex&quot;&gt;x \in X&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Here’s a visual depiction of lower semi-continuity:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/ipe-graphics/2018-06-12-lower-semicontinuous-general.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see above that &lt;script type=&quot;math/tex&quot;&gt;\Gamma x_0&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\Gamma x&lt;/script&gt; need not intersect to
satisfy lower semi-continuity.&lt;/p&gt;

&lt;!--
To think through this concept further, let's work it out for the special case of
when $$ X $$ and $$ Y $$ are metric spaces. Let $$ \varepsilon &gt; 0 $$ be
arbitrary, and select $$ y_0 \in \Gamma x_0 $$ and $$ y \in Y $$ such that $$
d_Y(y_0, y) &lt; \varepsilon $$. (That is, $$ y_0 $$ is a member of the ball $$
B(y, \varepsilon) $$.) Then lower semi-continuity means that we can fix $$
\delta &gt; 0 $$ so that if $$ d_X(x_0, x) &lt; \delta $$ for $$ x \in X $$, then
there exists $$z \in \Gamma x$$ such that $$d_Y(y,z) &lt; \varepsilon$$.

![](/files/ipe-graphics/2018-06-12-lower-semicontinuous-metric.png)

It's evident from the picture that $$d_Y(y_0, z) &lt; 2\varepsilon$$, which also
implies that 

$$ 
\begin{align}
d_Y(\Gamma x_0, \Gamma x) &amp;= \inf \{ d_Y(\nu_0, \nu) : \nu_0 \in \Gamma x_0, \nu
\in \Gamma x \} \\
&amp;&lt; 2\varepsilon.
\end{align}
$$

This motivates a sequential construction. Suppose in addition that $$ Y $$ is
complete. For $$ \varepsilon_n = \frac{1}{n} $$, choose $$ x_n \in X $$ such
that $$ \Gamma x_n \cap B(x_0, \varepsilon_n) \ne \emptyset$$, and take $$ y_n
$$ to be in this intersection arbitrarily. Then $$ d_Y(y_0, y_n) &lt; 2
\varepsilon_n $$, and hence the sequence $$ (y_n) $$ converges to $$ y_0 $$.
Importantly, it need not be that $$ x_n \to x_0 $$, though we can establish that
$$ (x_n) $$ is a bounded sequence (with a convergent subsequence).
--&gt;

&lt;h2 id=&quot;upper-semi-continuity&quot;&gt;Upper semi-continuity&lt;/h2&gt;

&lt;p&gt;Now let’s consider a parallel notion of semi-continuity. We say that &lt;script type=&quot;math/tex&quot;&gt;\Gamma&lt;/script&gt; is &lt;em&gt;upper semi-continuous&lt;/em&gt; at &lt;script type=&quot;math/tex&quot;&gt;x_0 \in X&lt;/script&gt; if, for any open &lt;script type=&quot;math/tex&quot;&gt;V \subseteq
Y&lt;/script&gt; with&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Gamma x_0 \subseteq V,&lt;/script&gt;

&lt;p&gt;there exists an open neighborhood &lt;script type=&quot;math/tex&quot;&gt;U(x_0) \subseteq X&lt;/script&gt; such that if &lt;script type=&quot;math/tex&quot;&gt;x \in
U(x_0)&lt;/script&gt;, then&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Gamma x \subseteq V.&lt;/script&gt;

&lt;p&gt;Equivalently, this last containment is equivalent to &lt;script type=&quot;math/tex&quot;&gt;\Gamma U(x_0) \subseteq
V&lt;/script&gt;. We will say that &lt;script type=&quot;math/tex&quot;&gt;\Gamma&lt;/script&gt; is upper semi-continuous on &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; if it is
upper semi-continuous at all &lt;script type=&quot;math/tex&quot;&gt;x \in X&lt;/script&gt;.[^1]&lt;/p&gt;

&lt;p&gt;Here’s a visual depiction of upper semi-continuity:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/ipe-graphics/2018-06-26-upper-semicontinuous-general.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the above case, &lt;script type=&quot;math/tex&quot;&gt;\Gamma x_0&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\Gamma x&lt;/script&gt; meet, but this is not
strictly necessary for &lt;script type=&quot;math/tex&quot;&gt;\Gamma&lt;/script&gt; to be upper semi-continuous.&lt;/p&gt;

&lt;p&gt;The definition I have given here for global upper semi-continuity, according to
Professor Feinberg, is controversial. In &lt;em&gt;Topological Spaces&lt;/em&gt;, Berge requires
that in addition to being upper semi-continuous at every &lt;script type=&quot;math/tex&quot;&gt;x \in X&lt;/script&gt;, global
upper semi-continuous multifunctions need also be compactly valued; that is, &lt;script type=&quot;math/tex&quot;&gt;\Gamma x&lt;/script&gt; is a compact subset of &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; for every &lt;script type=&quot;math/tex&quot;&gt;x \in X&lt;/script&gt;.  I didn’t
find this obviously crucial, but if you want to have the standard continuity
property that &lt;script type=&quot;math/tex&quot;&gt;\Gamma K&lt;/script&gt; is compact whenever &lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt; is compact, or if more
basically you want to have a continuous multifunction be equivalent to both
lower and upper semi-continuity, you need to throw this in. But for applications
in decision theory, global compactness guarantees are &lt;em&gt;really&lt;/em&gt; difficult in general.&lt;/p&gt;

&lt;p&gt;The immediate distinction between lower and upper semi-continuity is clear: with
lower semi-continuity we’re interested in preserving a “nonempty intersection”
property, but with upper semi-continuity we’re interested in preserving a
“covering” property. Okay, great. But what are we actually getting at by
defining these concepts as such?&lt;/p&gt;

&lt;p&gt;That is, I think, a challenging question in general. Nevertheless, there is one
important, initial way to clarify the distinction between lower and upper
semi-continuity. Namely, we can tie them back to our prior definitions of lower
and upper inverses. Recall that a function &lt;script type=&quot;math/tex&quot;&gt;f : X \to Y&lt;/script&gt; is continuous if
and only if &lt;script type=&quot;math/tex&quot;&gt;f^{-1}[G]&lt;/script&gt; is open in &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; whenever &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; is open in &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;. Likewise, we have the following characterizations of semi-continuous
multifunctions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorem&lt;/strong&gt;. Let &lt;script type=&quot;math/tex&quot;&gt;\Gamma : X \twoheadrightarrow Y&lt;/script&gt; be a multifunction. Then,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\Gamma&lt;/script&gt; is lower semi-continuous if and only if &lt;script type=&quot;math/tex&quot;&gt;\Gamma^- G&lt;/script&gt; is
open in &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; whenever &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; is open in &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\Gamma&lt;/script&gt; is upper semi-continuous if and only if &lt;script type=&quot;math/tex&quot;&gt;\Gamma^+ G&lt;/script&gt; is
open in &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; whenever &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; is open in &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Proof&lt;/em&gt;. (1.) Assume first that &lt;script type=&quot;math/tex&quot;&gt;\Gamma&lt;/script&gt; is lower semi-continuous, and
suppose &lt;script type=&quot;math/tex&quot;&gt;G \subseteq Y&lt;/script&gt; is open. Then whenever &lt;script type=&quot;math/tex&quot;&gt;x_0 \in \Gamma^- G&lt;/script&gt; we
can fix an open neighborhood &lt;script type=&quot;math/tex&quot;&gt;U(x_0)&lt;/script&gt; such that if &lt;script type=&quot;math/tex&quot;&gt;x \in U(x_0)&lt;/script&gt; we
have &lt;script type=&quot;math/tex&quot;&gt;\Gamma x \cap G \ne \emptyset&lt;/script&gt; — in other words, &lt;script type=&quot;math/tex&quot;&gt;x \in
\Gamma^- G&lt;/script&gt;. So &lt;script type=&quot;math/tex&quot;&gt;U(x_0) \subseteq \Gamma^- G&lt;/script&gt;, and since &lt;script type=&quot;math/tex&quot;&gt;x_0&lt;/script&gt; was
arbitrary we see that &lt;script type=&quot;math/tex&quot;&gt;\Gamma^- G&lt;/script&gt; is an open set. Conversely assume that
&lt;script type=&quot;math/tex&quot;&gt;\Gamma^- G&lt;/script&gt; is open. Then, given &lt;script type=&quot;math/tex&quot;&gt;x_0 \in \Gamma^- G&lt;/script&gt;, we can fix an open
neighbhorhood &lt;script type=&quot;math/tex&quot;&gt;U(x_0) \subseteq \Gamma^- G&lt;/script&gt;. But then the definition of
&lt;script type=&quot;math/tex&quot;&gt;\Gamma^- G&lt;/script&gt; gives us lower semi-continuity; for, &lt;script type=&quot;math/tex&quot;&gt;x \in U(x_0)&lt;/script&gt; implies
&lt;script type=&quot;math/tex&quot;&gt;\Gamma x \cap G \ne \emptyset&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;The proof of (2.) follows a nearly identical argument to that of (1.), replacing
the lower inverse criterion for the upper inverse criterion. &lt;script type=&quot;math/tex&quot;&gt;\square&lt;/script&gt;&lt;/p&gt;</content><author><name>David Kraemer</name></author><category term="research" /><category term="games" /><category term="topology" /><category term="optimization" /><summary type="html">Let and be topological spaces. One of the basic objects of study in topology are the continuous functions . Continuity in its pure form is a topological characterization: if is an open set, then continuity is equivalent to the openness of . The same concept is useful for multifunctions in addition to regular functions, though we need to clarify in this context. First, however, we need to disaggregate continuity into two weaker properties.</summary></entry><entry><title type="html">Multifunction inverses</title><link href="http://localhost:4000/ln/multifunction-inverses.html" rel="alternate" type="text/html" title="Multifunction inverses" /><published>2018-06-06T00:00:00-04:00</published><updated>2018-06-06T00:00:00-04:00</updated><id>http://localhost:4000/ln/multifunction-inverses</id><content type="html" xml:base="http://localhost:4000/ln/multifunction-inverses.html">&lt;p&gt;When we deal with normal functions &lt;script type=&quot;math/tex&quot;&gt;f : X \to Y&lt;/script&gt; we are frequently
interested in the behavior of &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; on subsets of &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;, rather than just
elements. We might write &lt;script type=&quot;math/tex&quot;&gt;f [ A ]&lt;/script&gt; to denote the image of &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; on the
subset &lt;script type=&quot;math/tex&quot;&gt;A \subseteq X&lt;/script&gt;. Conversely, given a subset &lt;script type=&quot;math/tex&quot;&gt;B \subseteq Y&lt;/script&gt;, we
can examine the “preimage” of &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; by &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; in the following way:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f^{-1} [B] = \{ x \in X : f(x) \in B \}.&lt;/script&gt;

&lt;p&gt;This is, to some extent, an abuse of notation because the function &lt;script type=&quot;math/tex&quot;&gt;f^{-1}&lt;/script&gt;
may not exist. Nevertheless there is no ambiguity, since when &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is
bijective (and consequently &lt;script type=&quot;math/tex&quot;&gt;f^{-1}&lt;/script&gt; exists), we have&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f^{-1} [\{ y \}] = \{ f^{-1} (y) \}&lt;/script&gt;

&lt;p&gt;for all &lt;script type=&quot;math/tex&quot;&gt;y \in Y&lt;/script&gt;. That is to say, the preimage of the singleton &lt;script type=&quot;math/tex&quot;&gt;\{ y \}&lt;/script&gt;
corresponds to the inverse function applied to &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt;.&lt;/p&gt;

&lt;h2 id=&quot;upper-and-lower-inverses&quot;&gt;Upper and lower inverses&lt;/h2&gt;

&lt;p&gt;One interesting issue that arises with multifunctions is that the preimage
actually disaggregates into two separate concepts. Given &lt;script type=&quot;math/tex&quot;&gt;\Gamma : X
\twoheadrightarrow Y&lt;/script&gt;, we define the &lt;em&gt;lower inverse&lt;/em&gt; of a set &lt;script type=&quot;math/tex&quot;&gt;B \subseteq Y&lt;/script&gt; as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Gamma^- B = \{ x \in X : \Gamma x \cap B \ne \emptyset \}&lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;/files/ipe-graphics/2018-06-06-lower-inverse.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and the &lt;em&gt;upper inverse&lt;/em&gt; as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Gamma^+ B = \{ x \in X : \Gamma x \subseteq B \}.&lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;/files/ipe-graphics/2018-06-06-upper-inverse.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In English, the upper inverse of &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; is the collection of points in &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;
which overlaps with &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; by &lt;script type=&quot;math/tex&quot;&gt;\Gamma&lt;/script&gt;, while the lower inverse of &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt;
is the collection of points which are mapped inside of &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; by &lt;script type=&quot;math/tex&quot;&gt;\Gamma&lt;/script&gt;.
It is not hard to see that the upper inverse property is stronger than the lower
inverse property. Indeed, &lt;script type=&quot;math/tex&quot;&gt;\Gamma^+ B \subseteq \Gamma^- B&lt;/script&gt; for any &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;As a sanity check, let’s verify that the upper and lower inverse images for
single-valued multifunctions (i.e. functions) coincide. Let &lt;script type=&quot;math/tex&quot;&gt;\sigma : X
\twoheadrightarrow Y&lt;/script&gt; be a single-valued multifunction, and let &lt;script type=&quot;math/tex&quot;&gt;B \subseteq
Y&lt;/script&gt; be arbitrary. We know that &lt;script type=&quot;math/tex&quot;&gt;\sigma^+ B \subseteq \sigma^- B&lt;/script&gt;, so we
just need to show that &lt;script type=&quot;math/tex&quot;&gt;\sigma^- B \subseteq \sigma^+ B&lt;/script&gt;. In that case,
consider an arbitrary &lt;script type=&quot;math/tex&quot;&gt;x \in \sigma^- B&lt;/script&gt;. We know that &lt;script type=&quot;math/tex&quot;&gt;\sigma x \cap B \ne
\emptyset&lt;/script&gt;, but since &lt;script type=&quot;math/tex&quot;&gt;\sigma&lt;/script&gt; is single-valued, this means that&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\{\sigma(x)\} \cap B \ne \emptyset.&lt;/script&gt;

&lt;p&gt;In other words, &lt;script type=&quot;math/tex&quot;&gt;\sigma x \subseteq B&lt;/script&gt;, which implies that &lt;script type=&quot;math/tex&quot;&gt;x \in \sigma^+
B&lt;/script&gt;. In summary, for single-valued multifunctions, &lt;script type=&quot;math/tex&quot;&gt;\sigma^+ = \sigma^- =
\sigma^{-1}&lt;/script&gt;, which is exactly the way we understand the preimage of a
function.&lt;/p&gt;

&lt;h2 id=&quot;inverses-as-multifunctions&quot;&gt;Inverses as multifunctions&lt;/h2&gt;

&lt;p&gt;It is equivalent for a function &lt;script type=&quot;math/tex&quot;&gt;f : X \to Y&lt;/script&gt; to have an inverse that &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; be bijective. This means that only a very small class of functions have
inverses. Of course every function has its preimage, which &lt;em&gt;resembles&lt;/em&gt; an
inverse function, but since functions have considerable structure the preimage
need not formally coincide with an inverse function.&lt;/p&gt;

&lt;p&gt;By contrast, when we weaken our assumption that our mappings have unique outputs
(i.e., when we go from functions to multifunctions), the distinction between
preimages and inverse multifunctions disappears. That is, given &lt;script type=&quot;math/tex&quot;&gt;\Gamma : X
\twoheadrightarrow Y&lt;/script&gt;, the multifunctions &lt;script type=&quot;math/tex&quot;&gt;\Lambda, \Upsilon : Y \twoheadrightarrow X&lt;/script&gt; by&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Lambda y = \Gamma^- \{ y \}, \qquad 
\Upsilon y = \Gamma^+ \{ y \}&lt;/script&gt;

&lt;p&gt;are perfectly well-defined. (Caveat: sometimes, &lt;script type=&quot;math/tex&quot;&gt;\Lambda y&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\Upsilon y&lt;/script&gt;
can be empty. This does not contradict the definition of a multifunction.)&lt;/p&gt;

&lt;h2 id=&quot;inverses-and-continuity&quot;&gt;Inverses and continuity&lt;/h2&gt;

&lt;p&gt;Where are we headed with all of this? Recall that a function &lt;script type=&quot;math/tex&quot;&gt;f : X \to Y&lt;/script&gt;
is continuous if and only if &lt;script type=&quot;math/tex&quot;&gt;f^{-1} [G]&lt;/script&gt; is open whenever &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; is open.
But as we shall see, there are actually &lt;em&gt;two&lt;/em&gt; notions of continuity embedded
here: lower and upper semi-continuity. When we disaggregate, we will see that
lower semi-continuity has a characterization in terms of the lower inverse and
upper semi-continuity has a characterization in terms of the upper inverse. In
the special case when both notions coincide, we arrive back at the usual
criterion.&lt;/p&gt;</content><author><name>David Kraemer</name></author><category term="research" /><category term="games" /><category term="topology" /><category term="optimization" /><summary type="html">When we deal with normal functions we are frequently interested in the behavior of on subsets of , rather than just elements. We might write to denote the image of on the subset . Conversely, given a subset , we can examine the “preimage” of by in the following way:</summary></entry><entry><title type="html">My summer excursion into multifunctions</title><link href="http://localhost:4000/ln/summer-excursion-on-multifunctions.html" rel="alternate" type="text/html" title="My summer excursion into multifunctions" /><published>2018-06-05T00:00:00-04:00</published><updated>2018-06-05T00:00:00-04:00</updated><id>http://localhost:4000/ln/summer-excursion-on-multifunctions</id><content type="html" xml:base="http://localhost:4000/ln/summer-excursion-on-multifunctions.html">&lt;p&gt;Besides managing a course, my first summer goal is to understand the &lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_theorem&quot;&gt;Berge
maximum theorem&lt;/a&gt; (BMT). According to Wikipedia, the theorem is useful for
describing continuity conditions for the solution of parameterized optimization
problems. Since I’m still new to the whole subject, I don’t quite understand
what that means! More on its interpretation and applications (hopefully!) soon.&lt;/p&gt;

&lt;p&gt;As a result in analysis, the BMT is novel to me because it relies on the notion
of a &lt;em&gt;multifunction&lt;/em&gt; (the translation of Berge’s text&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; calls it a
&lt;em&gt;correspondence&lt;/em&gt;). Intuitively, a function &lt;script type=&quot;math/tex&quot;&gt;f : X \to Y&lt;/script&gt; assigns to each &lt;script type=&quot;math/tex&quot;&gt;x
\in X&lt;/script&gt; the value &lt;script type=&quot;math/tex&quot;&gt;f(x) \in Y&lt;/script&gt;. As you might expect, a multifunction &lt;script type=&quot;math/tex&quot;&gt;F :
X \twoheadrightarrow Y&lt;/script&gt; assigns a set of values to each &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;. In other
words, &lt;script type=&quot;math/tex&quot;&gt;F(x) \subseteq Y&lt;/script&gt;. There is a natural way to express this as a
function by changing the codomain: define &lt;script type=&quot;math/tex&quot;&gt;f : X \to 2^Y&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;f(x) = F(x)&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;2^Y&lt;/script&gt; denotes the power set of &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;. Nevertheless, it is useful to
think of multifunctions as separate objects than functions, and that is how we
will proceed.&lt;/p&gt;

&lt;p&gt;A simple example of a multifunction is the square root operation: since both 2
and -2 are square roots of 4, we can define &lt;script type=&quot;math/tex&quot;&gt;\sqrt{\cdot} : \mathbb{R}^+ \to
\mathbb{R}&lt;/script&gt; that takes &lt;script type=&quot;math/tex&quot;&gt;\sqrt{4} = \{-2,2\}&lt;/script&gt;, for example. “Inverse” trig
functions are, properly speaking, multifunctions: to see this, note the example
that &lt;script type=&quot;math/tex&quot;&gt;\sin^{-1}(0) = \{ \pi n : n \in \mathbb{Z}\}&lt;/script&gt;. This is because we of
course know that &lt;script type=&quot;math/tex&quot;&gt;\sin(\pi n) = 0&lt;/script&gt; for all &lt;script type=&quot;math/tex&quot;&gt;n \in \mathbb{Z}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Here I will adopt the notation of Berge’s book. He reserves capital Greek
letters for general multifunctions and uses lower case Greek letters for the
usual single-valued functions. The shorthand &lt;script type=&quot;math/tex&quot;&gt;\Gamma x = \Gamma(x)&lt;/script&gt; and
&lt;script type=&quot;math/tex&quot;&gt;\Gamma A = \bigcup_{x \in A} \Gamma x&lt;/script&gt; will be of particular use.&lt;/p&gt;

&lt;p&gt;There are a number of simple operations and results you can establish about
multifunctions, but as a taste, I give one example. Suppose that we have two
different multifunctions &lt;script type=&quot;math/tex&quot;&gt;\Gamma_1, \Gamma_2 : X \twoheadrightarrow Y&lt;/script&gt;. We can
define a new mapping &lt;script type=&quot;math/tex&quot;&gt;\Gamma_1 \cap \Gamma_2 : X \twoheadrightarrow Y&lt;/script&gt; which
is given by&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;(\Gamma_1 \cap \Gamma_2) x = \Gamma_1 x \cap \Gamma_2 x.&lt;/script&gt;

&lt;p&gt;Since multifunctions map to sets, it is actually very natural that we may want
to construct new multifunctions by using the standard set operations. Indeed,
there are many such common constructions. Let’s say that a multifunction
&lt;script type=&quot;math/tex&quot;&gt;\Gamma&lt;/script&gt; is &lt;em&gt;injective&lt;/em&gt; if whenever &lt;script type=&quot;math/tex&quot;&gt;x \ne x'&lt;/script&gt; we have &lt;script type=&quot;math/tex&quot;&gt;\Gamma x \cap
\Gamma x' = \emptyset&lt;/script&gt;. (If you think through this definition, you will notice
that an injective multifunction determines a partition of its range, i.e.
implicitly defines an equivalence relation.) Here’s a neat fact that follows
from the definition of a multifunction and some properties of set operations:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proposition&lt;/strong&gt;. &lt;em&gt;If &lt;script type=&quot;math/tex&quot;&gt;\Gamma_1, \Gamma_2 : X \twoheadrightarrow Y&lt;/script&gt; are
multifunctions, and if &lt;script type=&quot;math/tex&quot;&gt;\Gamma_1&lt;/script&gt; is injective, then so is &lt;script type=&quot;math/tex&quot;&gt;\Gamma_1 \cap
\Gamma_2&lt;/script&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Proof&lt;/em&gt;. Let &lt;script type=&quot;math/tex&quot;&gt;x \ne x'&lt;/script&gt;. Then&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
(\Gamma_1 \cap \Gamma_2) x \cap (\Gamma_1 \cap \Gamma_2) x' &amp;=
(\Gamma_1 x \cap \Gamma_2 x ) \cap (\Gamma_1 x' \cap \Gamma_2 x') \\
&amp;= (\Gamma_1 x \cap \Gamma_1 x') \cap (\Gamma_2 x \cap \Gamma_2 x') \\
&amp;= \emptyset \cap (\Gamma_2 x \cap \Gamma_2 x') \\
&amp;= \emptyset,
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;as was needed. &lt;script type=&quot;math/tex&quot;&gt;\square&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;From my first investigation, it seems that the power of the multifunction
concept is that encapsulates sets. The above proof is an example of this, where
the entire result boils down to properties of setwise operations. But it is also
“close enough” to functions that it still yields many of their properties. Of
note, which is particularly relevant to the BMT, one can discuss the continuity
of multifunctions. This is ultimately where my exploration is heading.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Claude Berge, &lt;em&gt;Topological Spaces&lt;/em&gt; 1963, (translated by E.M. Patterson). &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>David Kraemer</name></author><category term="research" /><category term="games" /><category term="topology" /><category term="optimization" /><summary type="html">Besides managing a course, my first summer goal is to understand the Berge maximum theorem (BMT). According to Wikipedia, the theorem is useful for describing continuity conditions for the solution of parameterized optimization problems. Since I’m still new to the whole subject, I don’t quite understand what that means! More on its interpretation and applications (hopefully!) soon.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/2018-06-04-multifunction.png" /></entry><entry><title type="html">Reflections on the first year of graduate school</title><link href="http://localhost:4000/ln/reflections-on-first-year-of-grad-school.html" rel="alternate" type="text/html" title="Reflections on the first year of graduate school" /><published>2018-06-04T00:00:00-04:00</published><updated>2018-06-04T00:00:00-04:00</updated><id>http://localhost:4000/ln/reflections-on-first-year-of-grad-school</id><content type="html" xml:base="http://localhost:4000/ln/reflections-on-first-year-of-grad-school.html">&lt;h2 id=&quot;courses&quot;&gt;Courses&lt;/h2&gt;

&lt;p&gt;Probably the biggest transition from the undergraduate (and particularly,
liberal arts) experience and graduate work became apparent in the courses I
took. Generally speaking, I never had a class with more than 30 students in
college. Here, the norm has been (with one exception) &lt;em&gt;at least&lt;/em&gt; that many.&lt;/p&gt;

&lt;p&gt;I’ve found it harder to engage with the professors in larger environments. I
discovered that, as the class size increases, the barriers to participating
become stronger. I think barriers come in two forms. First, it simply is harder
to get your question asked, given that there are many more students who may also
have questions. More nefariously, I felt that with more students, the “stakes”
were somehow higher. If I asked my question, the interruption would affect more
students. And if, after the fact, it didn’t have the relevance or urgency that I
believed it did, then I would feel guilty for having wasted the other folks’
time.&lt;/p&gt;

&lt;p&gt;I think the essential difference is that with a small class, there is a much
stronger potential for having a collegial experience. That is, when you are with
the professor and a handful of other students, the social dynamic requires that
you behave differently: somewhat informal, participatory, and with more
sustained back-and-forth discussions. Moreover, these behaviors are &lt;em&gt;productive&lt;/em&gt;
in that they facilitate learning.&lt;/p&gt;

&lt;p&gt;When the class becomes larger, however, these same behaviors suddenly feel
emphatically unproductive. Your best strategy seems to devolve into soaking
every moment of the lecture up like a sponge and process it all much later. By
the way, this &lt;em&gt;really&lt;/em&gt; doesn’t work when the lecturer is awful, which was my
experience in two separate classes.&lt;/p&gt;

&lt;h2 id=&quot;professors&quot;&gt;Professors&lt;/h2&gt;

&lt;p&gt;The professors at a research university are here to do research. Some also
believe in the importance of their roles as teachers, but not all. This is not a
new insight, but it is strongly supported by my experience. I have much stronger
admiration for the professors who make an effort in their lectures, even when
they don’t fully succeed, than the many who visibly put negligible thought into
pedagogy.&lt;/p&gt;

&lt;p&gt;I also find that the experience of talking to professors is a bit of a roulette
game, depending on how they receive your interests and ideas. Whereas in
college, the underlying concern is for my curricular success, this is not always
true in graduate school. This is not necessarily bad, but it is certainly
different.&lt;/p&gt;

&lt;h2 id=&quot;research&quot;&gt;Research&lt;/h2&gt;

&lt;p&gt;Starting in a new field is very intimidating. Research articles are not written
for initiates, and frequently the topic’s textbook does not exist (because
otherwise would it truly constitute research?). Reading and rereading, taking
notes, and keeping a healthy sleep cycle have been my best tools in scaling this
hill. But I can’t speak to research much after this year’s work,
because course work simply dominated the bulk of my mental effort.&lt;/p&gt;

&lt;h2 id=&quot;projects&quot;&gt;Projects&lt;/h2&gt;

&lt;p&gt;I had a couple of small software projects in my first semester, none of which
were (designed to be) particularly challenging. In the second semester, I worked
on two substantial projects in computational geometry and convex optimization
which came to a somewhat reasonable conclusion.&lt;/p&gt;

&lt;p&gt;Besides the interpersonal fun that is always involved in a nontrivial group
project, I found it interesting to discover what distinguished the “easy” and
the “hard” parts of a project. Essentially, the “easy” part is the part you’ve
done before, and the “hard” part is the part you’ve never encountered.&lt;/p&gt;

&lt;p&gt;That sounds obvious. But what I mean is the parts that actually take up most of
the effort of the project may have nothing to do with what is difficult or
simple in the abstract. Two examples illustrate this.&lt;/p&gt;

&lt;p&gt;In computational geometry, I implemented certain measures of simple polygons in
C++. I expected that implementing the measures would be the most challenging
part, since they were new ideas and since I couldn’t know for certain that the
implementations were working. But, relative to the total time spent working on
the project, I spent very little time writing the code for the measures. (I
proved some basic results about the measures and checked that the
implementations conformed, so I was reasonably happy with their correctness.)
But I spent the vast majority of my work time dealing with the intricacies of
the floating point arithmetic kernels provided by the CGAL project, futzing with
Makefiles, and linking external dependencies.&lt;/p&gt;

&lt;p&gt;In convex optimization, I implemented a new optimization algorithm so to be
compatible with a major machine learning library. I expected that the algorithm
itself would be the biggest obstacle. (To be fair, it was quite hard writing it.
But it was “correct” and still failing for far longer than we had realized.)
Actually, our work time was dominated by reading shoddy documentation and sparse
discussion threads, studying existing library code, and periodically scrapping
everything we had compiled so far.&lt;/p&gt;

&lt;p&gt;For both cases, the project involved learning a component of a new library so
that our code would properly interact with it. Unlike writing pure software,
which I now have a few years’ experience with, working inside (and extending)
existing projects was a brand new problem for me. As a consequence, it ate up
the vast majority of my time.&lt;/p&gt;

&lt;h2 id=&quot;work-life-balance&quot;&gt;Work-life balance&lt;/h2&gt;

&lt;p&gt;I commuted to school all of first year, but because my girlfriend and I share a
car, this ended up meaning I had rigid drop-off and pick-up times. In one
respect this was great: it forced me to adopt the discipline of getting up early
(circa 6:25am). In other respects, it was very challenging. In college I could
use the campus to work far into the morning hours as the coursework demanded.
But this year I was very much constrained by a 7am-4pm cycle.&lt;/p&gt;

&lt;p&gt;Now that I live within walking distance to campus, I expect this cycle to relax
a bit. I can attend more talks and workshops without any major scheduling
crisis, and I can use the libraries or work with colleagues as needed.&lt;/p&gt;

&lt;p&gt;The upside to this year’s schedule was in forcing a better work-life balance. I
ate dinners at reasonable times. I took breaks from studying. I interacted with
other human beings (i.e. my girlfriend) socially. I don’t want to lose these
things, although I think the future demands of my program may require I scale
them back from time to time.&lt;/p&gt;

&lt;h2 id=&quot;what-is-applied-math&quot;&gt;What is applied math&lt;/h2&gt;

&lt;p&gt;Coming into this year, my working definition of applied math was: &lt;em&gt;mathematical
answers to questions arising outside of math&lt;/em&gt;. By contrast, I defined pure math
as: &lt;em&gt;mathematical answers to questions arising inside of math&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I really like this definition, but I suspect this is not quite accurate. Applied
math, as I have learned this year, is a broader field than the definition
permits. In the fall, I started out studying numerical solutions to differential
equations. Of course there is mathematics at play here, but there is just as
much physics motivating the solutions. High performance computing is classified
by some as an applied math field. It’s not obvious to me that the
theorem-proving, which lies at the heart of pure mathematics, is as central in
these areas.&lt;/p&gt;

&lt;p&gt;Though I haven’t been able to revise the definition in light of these new
experiences, I hope to stay &lt;em&gt;personally&lt;/em&gt; in an area of applied math that meets
my old criterion. It’s still early, but so far it seems like a good possibility.&lt;/p&gt;</content><author><name>David Kraemer</name></author><category term="math" /><category term="school" /><category term="introspective" /><summary type="html">Courses</summary></entry><entry><title type="html">Gradients for Grown-Ups (Part 2)</title><link href="http://localhost:4000/ln/gradients-for-grownups-part-02.html" rel="alternate" type="text/html" title="Gradients for Grown-Ups (Part 2)" /><published>2018-05-10T00:00:00-04:00</published><updated>2018-05-10T00:00:00-04:00</updated><id>http://localhost:4000/ln/gradients-for-grownups-part-02</id><content type="html" xml:base="http://localhost:4000/ln/gradients-for-grownups-part-02.html">&lt;p&gt;This is the second in a series of posts, “Gradients for Grown-Ups”. You can see
the previous post &lt;a href=&quot;gradients-for-grownups-part-01&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Last time, we got started with the example &lt;script type=&quot;math/tex&quot;&gt;f(x) = c^T x&lt;/script&gt; to showcase the
general procedure for computing gradients:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Express &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt; in “coordinate form” (e.g. with explicit summations).&lt;/li&gt;
  &lt;li&gt;Compute &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial f}{\partial x_k}&lt;/script&gt; over the coordinate form.&lt;/li&gt;
  &lt;li&gt;Collect the partial derivatives into the gradient vector.&lt;/li&gt;
  &lt;li&gt;Simplify and interpret the result.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This time, we’ll cover two more examples, &lt;script type=&quot;math/tex&quot;&gt;x^T x&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;x^T A x&lt;/script&gt;. The
goal is to get more familiar with the general setting of commmon linear algebra
functions.&lt;/p&gt;

&lt;h1 id=&quot;example-fx--xt-x&quot;&gt;Example: &lt;script type=&quot;math/tex&quot;&gt;f(x) = x^T x&lt;/script&gt;&lt;/h1&gt;

&lt;p&gt;You will see the objective function &lt;script type=&quot;math/tex&quot;&gt;f(x) = x^T x&lt;/script&gt; in &lt;em&gt;many&lt;/em&gt; places in
optimization, because this is another way of writing &lt;script type=&quot;math/tex&quot;&gt;\| x \|_2^2&lt;/script&gt;. If you
ever plan on analyzing distance minimization, least squares, or other similar
problems, you will end up taking the gradient of &lt;script type=&quot;math/tex&quot;&gt;\| x \|_2^2&lt;/script&gt; sooner rather
than later.&lt;/p&gt;

&lt;p&gt;Luckily, this is a relatively straightforward computation. First, let’s
represent &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt; in coordinate form:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x^T x = \sum_{i=1}^{n} x_i x_i = \sum_{i=1}^{n} x_i^2.&lt;/script&gt;

&lt;p&gt;Remember, if the compact summand notation is still too dense, feel free to write
out &lt;script type=&quot;math/tex&quot;&gt;x_1^2 + x_2^2 + \cdots + x_{n-1}^2 + x_n^2&lt;/script&gt;. Next, we take the &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;th
partial derivative:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\frac{\partial}{\partial x_k} x^T x &amp;= 
\frac{\partial}{\partial x_k} \sum_{i=1}^{n} x_i x_i \\
&amp;= \sum_{i=1}^{n} \frac{\partial}{\partial x_k}x_i^2.
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;If &lt;script type=&quot;math/tex&quot;&gt;i = k&lt;/script&gt;, then &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial }{\partial x_k} x_k^2 = 2 x_k&lt;/script&gt; by the
power rule. Otherwise, as in the previous case, &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial }{\partial x_k} x_i^2 = 0&lt;/script&gt;. Therefore,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum_{i=1}^{n} \frac{\partial}{\partial x_k}x_i^2 = 2 x_k.&lt;/script&gt;

&lt;p&gt;Now, we put the gradient vector together as before:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\nabla f(x) &amp;= \nabla x^T x \\
&amp;= \begin{bmatrix} 2 x_1 \\ 2 x_2 \\ \vdots \\ 2 x_{n-1} \\ 2 x_{n}
\end{bmatrix}.
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;Finally, we notice that this column vector is simply &lt;script type=&quot;math/tex&quot;&gt;2x&lt;/script&gt;. So &lt;script type=&quot;math/tex&quot;&gt;\nabla x^T x
= 2x&lt;/script&gt;, which is a generalization of the familiar quadratic rule: &lt;script type=&quot;math/tex&quot;&gt;\frac{d}{dx} x^2 = 2x&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Nice, we’re done!&lt;/p&gt;

&lt;h1 id=&quot;example-fx--xt-a-x&quot;&gt;Example: &lt;script type=&quot;math/tex&quot;&gt;f(x) = x^T A x&lt;/script&gt;&lt;/h1&gt;

&lt;p&gt;This example is significantly more tricky, so we will take our time in getting
through it.&lt;/p&gt;

&lt;p&gt;Let’s think through what &lt;script type=&quot;math/tex&quot;&gt;x^T A x&lt;/script&gt; translates to. First, let’s consider the
product &lt;script type=&quot;math/tex&quot;&gt;A x&lt;/script&gt;. Now, there are two ways to picture the matrix-vector
multiplication:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{bmatrix}
a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \\
a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} \\
\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\
a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \\
\end{bmatrix}
\begin{bmatrix}
x_1 \\ x_2 \\ \vdots \\ x_n
\end{bmatrix}. %]]&gt;&lt;/script&gt;

&lt;p&gt;First, matrix-vector multiplication is defined so that the &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;th entry of the
result is a dot product of the &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;th row of &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{bmatrix}
a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \\
a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} \\
\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\
a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \\
\end{bmatrix}
\begin{bmatrix}
x_1 \\ x_2 \\ \vdots \\ x_n
\end{bmatrix} = 
\begin{bmatrix}
a_{11} x_1 + a_{12} x_2 + \cdots + a_{1n} x_n \\
a_{21} x_1 + a_{22} x_2 + \cdots + a_{2n} x_n \\
\vdots \\
a_{n1} x_1 + a_{n2} x_2 + \cdots + a_{nn} x_n
\end{bmatrix}. %]]&gt;&lt;/script&gt;

&lt;p&gt;Alternatively, matrix-vector multiplication is defined to be a linear
combination of the columns of &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{bmatrix}
a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \\
a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} \\
\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\
a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \\
\end{bmatrix}
\begin{bmatrix}
x_1 \\ x_2 \\ \vdots \\ x_n
\end{bmatrix} = 
x_1 
\begin{bmatrix}
a_{11} \\ a_{21} \\ \vdots \\ a_{n1}
\end{bmatrix} + 
x_2 
\begin{bmatrix}
a_{12} \\ a_{22} \\ \vdots \\ a_{n2}
\end{bmatrix} + \cdots +
x_n 
\begin{bmatrix}
a_{1n} \\ a_{2n} \\ \vdots \\ a_{nn}
\end{bmatrix}. %]]&gt;&lt;/script&gt;

&lt;p&gt;This last interpretation is going to be more helpful for our purposes. Writing
compactly in coordinate form, this is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Ax = \sum_{j=1}^{n} x_j 
\begin{bmatrix} a_{1j} \\ a_{2j} \\ \vdots \\ a_{nj} \end{bmatrix}.&lt;/script&gt;

&lt;p&gt;Now we can simply take the inner product &lt;script type=&quot;math/tex&quot;&gt;x^T (Ax)&lt;/script&gt; and put it in coordinate
form:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
x^T(Ax) &amp;= x^T \left( \sum_{j=1}^{n} x_j 
\begin{bmatrix} a_{1j} \\ a_{2j} \\ \vdots \\ a_{nj} \end{bmatrix} \right) \\
&amp;= \sum_{j=1}^{n} x_j \cdot 
\begin{bmatrix} x_1 &amp; x_2 &amp; \cdots &amp; x_n \end{bmatrix}
\begin{bmatrix} a_{1j} \\ a_{2j} \\ \vdots \\ a_{nj} \end{bmatrix} \\
&amp;= \sum_{j=1}^{n} x_j \sum_{i=1}^{n} x_i a_{ij} \\
&amp;= \sum_{i=1}^{n} \sum_{j=1}^{n} a_{ij} x_i x_j.
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;The trickiness ultimately boils down to the fact that there are two separate
summations going on. When we work with multiple summations, we have to take more
care with the calculations.&lt;/p&gt;

&lt;p&gt;Next, we take the partial derivative with respect to &lt;script type=&quot;math/tex&quot;&gt;x_k&lt;/script&gt;. Let’s simplify
notation a bit and use &lt;script type=&quot;math/tex&quot;&gt;\partial_k&lt;/script&gt; to mean &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial}{\partial x_k}&lt;/script&gt;.
We have&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\partial_k (x^T Ax) &amp;= \partial_k \sum_{i=1}^{n} \sum_{j=1}^{n} a_{ij} x_i x_j
\\
&amp;= \sum_{i=1}^{n} \partial_k \sum_{j=1}^{n} a_{ij} x_i x_j.
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;Let’s compute &lt;script type=&quot;math/tex&quot;&gt;\partial_k \sum_{j=1}^{n} a_{ij} x_i x_j&lt;/script&gt; in two cases.
Suppose first that &lt;script type=&quot;math/tex&quot;&gt;i \ne k&lt;/script&gt;. Then this is the very simple case of&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\partial_k \sum_{j=1}^{n} a_{ij} x_i x_j = a_{ik} x_i.&lt;/script&gt;

&lt;p&gt;Now, suppose that &lt;script type=&quot;math/tex&quot;&gt;i = k&lt;/script&gt;. Then we have to take a bit more care, but the
computation still goes through (relatively) simply:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\partial_k \sum_{j=1}^{n} a_{ij} x_i x_j = 
2a_{kk} x_k + \sum_{j \ne k} a_{kj} x_j.&lt;/script&gt;

&lt;p&gt;Combining these two cases (and noticing that we can replace &lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt; by &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;) in
one sum, we get the very nicely laid out:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\partial_k (x^T Ax) &amp;= \sum_{i=1}^{n} \partial_k \sum_{j=1}^{n} a_{ij} x_i x_j
\\
&amp;= \sum_{i=1}^{n} (a_{ik} + a_{ki}) x_i
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;What does this correspond to for the gradient? Notice that&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
(A + A^T)x &amp;= 
\begin{bmatrix} \sum_{i=1}^{n} (a_{ik} + a_{ki}) x_i \end{bmatrix}
\end{align}. %]]&gt;&lt;/script&gt;

&lt;p&gt;This is exactly &lt;script type=&quot;math/tex&quot;&gt;\nabla (x^T Ax)&lt;/script&gt;! So&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\nabla(x^T Ax) = (A + A^T) x,&lt;/script&gt;

&lt;p&gt;and notice that in the special case of &lt;script type=&quot;math/tex&quot;&gt;A = A^T&lt;/script&gt;, we have &lt;script type=&quot;math/tex&quot;&gt;\nabla(x^T Ax)
= 2Ax&lt;/script&gt;. This actually generalizes our work from last time:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\nabla(x^T x) &amp;= \nabla( x^T I x) \\
&amp;= 2I x \\
&amp;= 2x
\end{align}. %]]&gt;&lt;/script&gt;

&lt;p&gt;So far, we have been using the component-based approach outlined above. We take
the &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;th partial derivative and put the gradient together from the bottom up.
Next time, we will start to incorporate actual &lt;em&gt;properties&lt;/em&gt; of the gradient to
make our lives easier.&lt;/p&gt;</content><author><name>David Kraemer</name></author><category term="math" /><category term="gradient" /><summary type="html">This is the second in a series of posts, “Gradients for Grown-Ups”. You can see the previous post here.</summary></entry><entry><title type="html">Gradients for Grown-Ups (Part 1)</title><link href="http://localhost:4000/ln/gradients-for-grownups-part-01.html" rel="alternate" type="text/html" title="Gradients for Grown-Ups (Part 1)" /><published>2018-05-09T00:00:00-04:00</published><updated>2018-05-09T00:00:00-04:00</updated><id>http://localhost:4000/ln/gradients-for-grownups-part-01</id><content type="html" xml:base="http://localhost:4000/ln/gradients-for-grownups-part-01.html">&lt;p&gt;This is the first in a series of posts, “Gradients for Grown-Ups”. You can see
the next post &lt;a href=&quot;gradients-for-grownups-part-02&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Boyd and Vanderberghe’s &lt;em&gt;Convex Optimization&lt;/em&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; is an excellent primer for
learning the fundamentals of the subject. I should know, because I just took a
course which featured this book. I didn’t always pay attention in class (because
it was my sixth consecutive hour of lectures! Kids, pay attention in school),
and the textbook was always a useful fallback on the course material.&lt;/p&gt;

&lt;p&gt;I have one complaint about the book, however, which was a problem I had
throughout. The text assumes that you’ve had multivariate calculus and seen the
major parts of linear algebra, but I felt that this understates the
prerequisites. To be sure, I’ve had my share of calculus and analysis. I’ve sat
in linear algebra lectures more times than I care to admit. So I thought I would
be fine going in, and I was.&lt;/p&gt;

&lt;p&gt;Mostly.&lt;/p&gt;

&lt;p&gt;You see, in my calculus classes, a typical question one might encounter is the
following:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Compute &lt;script type=&quot;math/tex&quot;&gt;\nabla f(x,y)&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;f(x,y) = xy \sin(x^2)&lt;/script&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is pretty routine. You compute &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial f}{\partial x}&lt;/script&gt; and
&lt;script type=&quot;math/tex&quot;&gt;\frac{\partial f}{\partial y}&lt;/script&gt;, and store them in the form of a vector. After
all, this is what the gradient is.&lt;/p&gt;

&lt;p&gt;By contrast, the textbook expects you to be comfortable with questions like
this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Compute &lt;script type=&quot;math/tex&quot;&gt;\nabla f(x)&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;f(x) = x^TAx&lt;/script&gt; for &lt;script type=&quot;math/tex&quot;&gt;A \in \mathbb{R}^{n
\times n}&lt;/script&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Of course, this is still computing a gradient, which should be natural. But we
are dealing with very special operations (e.g., matrix-vector products), and the
gradient is ultimately going to be expressed in terms of them. Also, this is
&lt;script type=&quot;math/tex&quot;&gt;\mathbb{R}^{n}&lt;/script&gt; world, not the nice &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; world. The generality is
pretty intimidating!&lt;/p&gt;

&lt;p&gt;This post (along with a few successors) will be the &lt;em&gt;post-prerequisite&lt;/em&gt;
prerequisite for working in this subject, given that you’ve had a calculus and
linear algebra background similar to mine.&lt;/p&gt;

&lt;h1 id=&quot;overview-the-example-nabla-ct-x&quot;&gt;Overview: the example &lt;script type=&quot;math/tex&quot;&gt;\nabla c^T x&lt;/script&gt;&lt;/h1&gt;

&lt;p&gt;Ultimately, the only difference between what we learned in calculus and what is
asked of us here is a level of generality. We simply need to perform the basic
steps from before and we will be done. But instead of being given a parameter
parameters &lt;script type=&quot;math/tex&quot;&gt;(x,y,z,\ldots)&lt;/script&gt;, we have to interpret &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; as the list itself.
Get ready for subscripting hell!&lt;/p&gt;

&lt;p&gt;Let’s start with a relatively easy problem. Let &lt;script type=&quot;math/tex&quot;&gt;c \in \mathbb{R}^n&lt;/script&gt; be fixed
and define &lt;script type=&quot;math/tex&quot;&gt;f(x) = c^T x&lt;/script&gt;. In other words &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt; is a weighted linear
combination of the elements of &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;. It’s the sort of term which arises
naturally in linear programming contexts. We want to compute &lt;script type=&quot;math/tex&quot;&gt;\nabla f(x)&lt;/script&gt;,
so we will start by selecting an arbitrary index of &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; (I’m partial to &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;, but go nuts), and compute its derivative. We have&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
  \frac{\partial}{\partial x_k} f(x) &amp;= 
  \frac{\partial}{\partial x_k} c^T x \\&amp;= 
  \frac{\partial}{\partial x_k} \sum_{i=1}^{n} c_i x_i.
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;The above is simply by unpacking the &lt;script type=&quot;math/tex&quot;&gt;c^T x&lt;/script&gt; into its component parts, i.e.
&lt;script type=&quot;math/tex&quot;&gt;c^T x = c_1 x_1 + c_2 x_2 + \cdots + c_{n-1} x_{n-1} + c_n x_n&lt;/script&gt;. If you
prefer, start off by writing out the terms “explicitly” like this, to make sure
you keep everything straight. Ideally, as you get more comfortable with these
operations, you will switch to the summation form. It’s more compact and
ultimately easier to work with.&lt;/p&gt;

&lt;p&gt;Since differentiation is linear, we can write&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial}{\partial x_k} \sum_{i=1}^{n} c_i x_i = \sum_{i=1}^{n}
\frac{\partial}{\partial x_k} c_i x_i.&lt;/script&gt;

&lt;p&gt;Now we should note a few things that we need to be careful about. First of all,
the summation index is &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;, not &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;. In general these will be distinct,
because they are referring to differen things. Next, let’s think through the
evaluation of &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial}{\partial x_k} c_i x_i&lt;/script&gt;. If &lt;script type=&quot;math/tex&quot;&gt;i = k&lt;/script&gt;, then
this we should have&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\frac{\partial}{\partial x_k} c_i x_i &amp;= 
\frac{\partial}{\partial x_k} c_k x_k \\
&amp;= c_k,
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;but otherwise, &lt;script type=&quot;math/tex&quot;&gt;c_i x_i&lt;/script&gt; will not depend on &lt;script type=&quot;math/tex&quot;&gt;x_k&lt;/script&gt;, and so &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial}{\partial x_k} c_i x_i = 0&lt;/script&gt; in that case. Putting this all
together, we get&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum_{i=1}^{n} \frac{\partial}{\partial x_k} c_i x_i = c_k,&lt;/script&gt;

&lt;p&gt;since every term is &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt; except for when &lt;script type=&quot;math/tex&quot;&gt;i = k&lt;/script&gt;. So in total, &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial}{\partial x_k} c^T x = c_k&lt;/script&gt;. Now, this was the &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;th entry of
the gradient, so we have&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
  \nabla f(x) &amp;= \nabla c^Tx \\
  &amp;= \begin{bmatrix} c_1 \\ c_2 \\ \vdots \\ c_{n-1} \\ c_n \end{bmatrix}.
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;What is this object? Well, the &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;th entry of &lt;script type=&quot;math/tex&quot;&gt;\nabla f(x)&lt;/script&gt; is &lt;script type=&quot;math/tex&quot;&gt;c_k&lt;/script&gt;, so
in fact this is nothing other than &lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt; itself. So&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\nabla c^Tx = c.&lt;/script&gt;

&lt;p&gt;By the way, this correctly generalizes our favorite 1-dimensional result:
&lt;script type=&quot;math/tex&quot;&gt;\frac{d}{d x} c x = c&lt;/script&gt;.&lt;/p&gt;

&lt;h1 id=&quot;summary-how-to-take-a-harder-gradient&quot;&gt;Summary: How to take a hard(er) gradient&lt;/h1&gt;

&lt;p&gt;The general procedure, employed here and throughout later posts, is&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Express &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt; in “coordinate form” (e.g. with explicit summations).&lt;/li&gt;
  &lt;li&gt;Compute &lt;script type=&quot;math/tex&quot;&gt;\frac{\partial f}{\partial x_k}&lt;/script&gt; over the coordinate form.&lt;/li&gt;
  &lt;li&gt;Collect the partial derivatives into the gradient vector.&lt;/li&gt;
  &lt;li&gt;Simplify and interpret the result.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;addendum-dimension-observations&quot;&gt;Addendum: dimension observations&lt;/h1&gt;

&lt;p&gt;The weight &lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt; was an element of &lt;script type=&quot;math/tex&quot;&gt;\mathbb{R}^{n}&lt;/script&gt;, which is usually interpreted
to mean that it was a column vector. To form &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt;, we flipped &lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt; via
transposing into a row vector, and multiplied it by &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;. (Of course, this is
so that the multiplication makes sense.) The gradient operation seems to have
flipped it back to a column vector, &lt;script type=&quot;math/tex&quot;&gt;\nabla f(x) = c&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;As we shall see, this is a common thing to expect from linear algebraic functions.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;The book is freely available on Boyd’s &lt;a href=&quot;http://web.stanford.edu/~boyd/cvxbook/&quot;&gt;site&lt;/a&gt;, along with a number of other resources. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>David Kraemer</name></author><category term="math" /><category term="gradient" /><summary type="html">This is the first in a series of posts, “Gradients for Grown-Ups”. You can see the next post here.</summary></entry><entry><title type="html">When abstraction is simpler</title><link href="http://localhost:4000/ln/when-abstraction-is-simpler.html" rel="alternate" type="text/html" title="When abstraction is simpler" /><published>2018-04-04T00:00:00-04:00</published><updated>2018-04-04T00:00:00-04:00</updated><id>http://localhost:4000/ln/when-abstraction-is-simpler</id><content type="html" xml:base="http://localhost:4000/ln/when-abstraction-is-simpler.html">&lt;p&gt;I am always delighted when abstraction makes a problem noticeably easier to
solve. Today I encountered (Jacod 1999) the following homework question:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let &lt;script type=&quot;math/tex&quot;&gt;Y \sim N(0,1)&lt;/script&gt; be standard-normally disributed, and let &lt;script type=&quot;math/tex&quot;&gt;a &gt; 0&lt;/script&gt;. Let&lt;/em&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\newcommand{\abs}[1]{\vert#1\vert}
Z = 
\begin{cases}
  Y &amp; |Y| \leq a, \\
  -Y &amp; |Y| &gt; a.
\end{cases} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;em&gt;Show that &lt;script type=&quot;math/tex&quot;&gt;Z \sim N(0,1)&lt;/script&gt; as well.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I honestly groaned when I first read it, because I imagined that I might have
to evaluate some integrals involving a Gaussian kernel and error functions. This
is not my favorite activity.&lt;/p&gt;

&lt;p&gt;As I thought through it, I realized that I had no basic intuition for how to
proceed with the solution, so I did what I love do: draw a picture. I ended up
with something that resembled the following picture.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;/assets/figures/gaussian.png&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;Here the yellowish region indicates when &lt;script type=&quot;math/tex&quot;&gt;\abs{Y} \leq a&lt;/script&gt; and the bluish regions
indicate when &lt;script type=&quot;math/tex&quot;&gt;\abs{Y} &gt; a&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;As I started playing around with the plot, I realized that if &lt;script type=&quot;math/tex&quot;&gt;|Y| \leq a&lt;/script&gt;
then this simply meant that &lt;script type=&quot;math/tex&quot;&gt;Z&lt;/script&gt; would behave exactly as &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;, but if &lt;script type=&quot;math/tex&quot;&gt;|Y| &gt;
a&lt;/script&gt; then the behavior would “flip” around the origin. But was the “flip”
consequential? Apparently not, because the extremes are shaped symmetrically.&lt;/p&gt;

&lt;p&gt;Actually the whole plot is symmetric, and this is well known about Gaussian
kernels. My intuition had nothing to do with density functions that
specifically followed &lt;script type=&quot;math/tex&quot;&gt;\exp(-x^2)&lt;/script&gt;, however. I really was just interested that
&lt;script type=&quot;math/tex&quot;&gt;|Y|&lt;/script&gt; was symmetrically distributed.&lt;/p&gt;

&lt;p&gt;So I started thinking about symmetrically distributed random variables as an
abstraction over this particular instance. It turns out that the proof falls out
easily if you just take this assumption:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Proof&lt;/em&gt;. If &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; is symmetrically distributed, then &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;-Y&lt;/script&gt; are
identically distributed, and&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(Y \leq y) = P(-Y \leq y).&lt;/script&gt;

&lt;p&gt;To determine &lt;script type=&quot;math/tex&quot;&gt;P(Z \leq z)&lt;/script&gt;, condition on &lt;script type=&quot;math/tex&quot;&gt;\abs{Y}&lt;/script&gt;. In particular, we can write&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(Z \leq z) = P(Y \leq z) P(|Y| \leq a) + P(-Y \leq z) P(|Y| &gt; a).&lt;/script&gt;

&lt;p&gt;But since &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; is symmetrically distributed, this implies&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(Z \leq z) = P(Y \leq z) [P(|Y| \leq a) + P(|Y| &gt; a)],&lt;/script&gt;

&lt;p&gt;and as &lt;script type=&quot;math/tex&quot;&gt;P(|Y| \leq a) + P(|Y| &gt; a) = 1&lt;/script&gt;, we conclude that &lt;script type=&quot;math/tex&quot;&gt;P(Z \leq z) = P(Y
\leq z)&lt;/script&gt;, which means that &lt;script type=&quot;math/tex&quot;&gt;Z&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; are identically distributed.
&lt;script type=&quot;math/tex&quot;&gt;\square&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;There are substantial reasons to prefer this result over the statement of the
homework problem. For one, this fact doesn’t even require that &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; have a
density function. It applies to &lt;em&gt;any&lt;/em&gt; symmetric distribution, whether discrete,
continuous, singular, or mixed.&lt;/p&gt;

&lt;p&gt;Truthfully, I enjoy these sorts of arguments not particularly because of the
generality, but because they’re so simple. When I thought in terms of
Gaussians and error functions, I was sweating the details of nasty integrals and
proper bounds. The general case, by abstracting over those details, directs you
to “cut to the chase.” Which assumptions are absolutely essential? Okay, well
I’ll have to use those somewhere. The rest I can discard. In this sense, by
abstracting, I “restricted” my toolkit and identified the important devices.&lt;/p&gt;

&lt;p&gt;Of course this strategy doesn’t always work. Sometimes many properties, specific
and general, are required to make an argument go through. Needless generality
can easily obfuscate what’s actually going on, too, and this ruins rather
than refines intuition.&lt;/p&gt;

&lt;p&gt;This sort of exercise represents a “sweet spot” of abstraction. The payoff is a
direct, clear argument, but one that remains connected to the original problem.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;You can view the notebook for this plot &lt;a href=&quot;/files/notebooks/18-04-04-notebook.html&quot;&gt;here&lt;/a&gt;, or download it from &lt;a href=&quot;/files/notebooks/18-04-04-notebook.ipynb&quot;&gt;here&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>David Kraemer</name></author><category term="math" /><category term="proofs" /><category term="abstract" /><summary type="html">I am always delighted when abstraction makes a problem noticeably easier to solve. Today I encountered (Jacod 1999) the following homework question:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/focus.jpg" /></entry></feed>